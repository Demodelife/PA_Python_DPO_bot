import requests
from loader import bot
from telebot.types import Union, CallbackQuery, Message
from states.hotel_information import HotelInfoState, BestDealState
from utils.api_requests.hotels_request import post_hotels_request
from utils.api_requests.detail_request import post_detail_request
from random import choice
from . import base_commands
from keyboards.inline.all_keyboards import row_address_and_on_map


@bot.message_handler(state=HotelInfoState.info_low_high)
def info_low_high(message: Union[CallbackQuery, Message]) -> None:

    if message.text == '–î–∞':
        if base_commands.is_best_deal:
            bot.set_state(message.from_user.id, BestDealState.price_min, message.chat.id)
            bot.send_message(message.from_user.id, choice(['–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞($)',
                                                           '–ù—É–∂–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ ($)',
                                                           '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ ($)']))
        else:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:

                if data['need_photo']:
                    full_info = f"–ß—É–¥–µ—Å–Ω–æ!\n–í–∞—à –∑–∞–ø—Ä–æ—Å:\n" \
                                f"–ì–æ—Ä–æ–¥: {data['city']}\n" \
                                f"ID –≥–æ—Ä–æ–¥–∞: {data['cityID']}\n" \
                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π: {data['hotel_amt']}\n" \
                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {data['photo_amt']}"
                else:
                    full_info = f"–û—Ç–ª–∏—á–Ω–æ!\n–í–∞—à –∑–∞–ø—Ä–æ—Å:\n" \
                                f"–ì–æ—Ä–æ–¥: {data['city']}\n" \
                                f"ID –≥–æ—Ä–æ–¥–∞: {data['cityID']}\n" \
                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π: {data['hotel_amt']}\n" \
                                f"–ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"

            bot.send_message(message.from_user.id, full_info)
            bot.send_message(message.from_user.id, choice(['–û–∂–∏–¥–∞–π—Ç–µ...',
                                                           '–ú–æ–∂–Ω–æ üí§? –ñ–¥—ë–º...',
                                                           '–¢–∏–∫-—Ç–∞–∫ ‚åõ –û–∂–∏–¥–∞–µ–º...',
                                                           '–ù–∞–¥–µ—é—Å—å –º–æ—è üîã –Ω–µ —Å—è–¥–µ—Ç...\n'
                                                           '–®—É—á—Éüòâ –ü—Ä–æ—Å—Ç–æ —á—É—Ç–æ–∫ –ø–æ–¥–æ–∂–¥–µ–º...',
                                                           '–í–æ–∑—å–º–∏—Ç–µ –ø–æ–∫–∞ —á—Ç–æ üéß\n'
                                                           '–ò –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º...']))

            low_to_high = "PRICE_LOW_TO_HIGH"
            high_to_low = "PRICE_HIGH_TO_LOW"

            if base_commands.is_low_price:
                sorting = low_to_high
            else:
                sorting = high_to_low

            offers = post_hotels_request(data['cityID'], data['hotel_amt'], sorting)

            if offers and not data['need_photo']:

                if sorting == "PRICE_LOW_TO_HIGH":
                    sort_val = sorted(offers.items(), key=lambda val: int(val[1][1][1:]))
                else:
                    sort_val = sorted(offers.items(), key=lambda val: int(val[1][1][1:]), reverse=True)

                bot.send_message(message.from_user.id, choice(['–ü–æ–¥–æ–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:',
                                                               '–ß—Ç–æ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å:',
                                                               '–ü–æ–¥–æ–±—Ä–∞–ª —Å–ª–µ–¥—É—é—â–µ–µ:']))
                count = 1

                for i_info in sort_val:

                    bot.send_message(message.from_user.id,
                                     f'{count}. <b>{i_info[1][0]}</b>\n'
                                     f'<i>–¶–µ–Ω–∞: {i_info[1][1]}</i>',
                                     reply_markup=row_address_and_on_map(i_info[0]),
                                     parse_mode='html')
                    count += 1

            elif offers and data['need_photo']:
                sort_offers = sorted(offers.items(), key=lambda val: int(val[1][1][1:]))
                bot.send_message(message.from_user.id, choice(['–ü–æ–¥–æ–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:',
                                                               '–ß—Ç–æ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å:',
                                                               '–ü–æ–¥–æ–±—Ä–∞–ª —Å–ª–µ–¥—É—é—â–µ–µ:']))
                count = 1

                for i_offer in sort_offers:
                    offer_with_photo = post_detail_request(i_offer[0], data['photo_amt'])

                    bot.send_message(message.from_user.id,
                                     f'{count}. <b>{i_offer[1][0]}</b>\n'
                                     f'<i>–¶–µ–Ω–∞: {i_offer[1][1]}</i>',
                                     reply_markup=row_address_and_on_map(i_offer[0]),
                                     parse_mode='html')
                    count += 1

                    for i_name, i_lst in offer_with_photo.items():
                        if i_name not in ('address', 'static_img'):
                            for i_dct in i_lst:
                                for i_url, i_desc in i_dct.items():
                                    photo_file = requests.get(i_url)
                                    bot.send_photo(message.from_user.id,
                                                   photo_file.url,
                                                   caption=f'{i_desc}')
            else:
                bot.send_message(message.from_user.id, choice(['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n'
                                                               '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥',
                                                               '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n'
                                                               '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥',
                                                               '–ß—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n'
                                                               '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥']))

    else:
        bot.send_message(message.from_user.id, choice(['–°–∫–∞–∂–∏—Ç–µ –∂–µ –º–Ω–µ "–î–∞"',
                                                       '–ù—É –ø—Ä–æ—à—É –≤–∞—Å üôè\n'
                                                       '–í–≤–µ–¥–∏—Ç–µ "–î–∞"',
                                                       '–¢–∞–∫ —Ö–æ—á–µ—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–πüò©\n'
                                                       '–ñ–¥—É –≤–∞—à–µ "–î–∞"',
                                                       '"–î–∞"ü•±']))

from loader import bot
from states.contact_information import UserInfoState
from telebot.types import Message
from keyboards.reply.contact import request_contact
from os import path
from datetime import datetime
from loguru import logger


@bot.message_handler(commands=['survey'])
def survey(message: Message) -> None:
    bot.set_state(message.from_user.id, UserInfoState.name, message.chat.id)
    bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –æ–ø—Ä–æ—Å–Ω–∏–∫–µ, {message.from_user.username}! '
                                           f'–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è')


@bot.message_handler(state=UserInfoState.name)
def get_name(message: Message) -> None:
    if message.text.isalpha():
        bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å–∞–ª! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
        bot.set_state(message.from_user.id, UserInfoState.age, message.chat.id)

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['name'] = message.text
    else:
        bot.send_message(message.from_user.id, '–ö–∞–∫–æ–µ —Å—Ç—Ä–∞–Ω–Ω–æ–µ —É —Ç–µ–±—è –∏–º—è...ü§î'
                                               '–ú–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—à—å - –Ω–µ—Ç –ª–∏ —Ç–∞–º —Ü–∏—Ñ—Ä...')


@bot.message_handler(state=UserInfoState.age)
def get_age(message: Message) -> None:
    if message.text.isdigit():
        bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å–∞–ª! '
                                               '–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è')
        bot.set_state(message.from_user.id, UserInfoState.country, message.chat.id)

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['age'] = message.text
    else:
        bot.send_message(message.from_user.id, '–í–æ–∑—Ä–∞—Å—Ç –≤–æ–æ–±—â–µ-—Ç–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä...ü§î')


@bot.message_handler(state=UserInfoState.country)
def get_country(message: Message) -> None:
    bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å–∞–ª! '
                                           '–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥')
    bot.set_state(message.from_user.id, UserInfoState.city, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['country'] = message.text


@bot.message_handler(state=UserInfoState.city)
def get_city(message: Message) -> None:
    bot.send_message(message.from_user.id,
                     '–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–∏—Å–∞–ª!\n'
                     '–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏–≤ "–ù–µ—Ç"',
                     reply_markup=request_contact())
    bot.set_state(message.from_user.id, UserInfoState.phone_number, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['city'] = message.text


@logger.catch
@bot.message_handler(content_types=['text', 'contact'], state=UserInfoState.phone_number)
def get_contact(message: Message) -> None:
    if message.content_type == 'contact':
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['phone_number'] = message.contact.phone_number

            full_info = '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n' \
                        f'–ò–º—è: {data["name"]}\n' \
                        f'–í–æ–∑—Ä–∞—Å—Ç: {data["age"]}\n' \
                        f'–°—Ç—Ä–∞–Ω–∞: {data["country"]}\n' \
                        f'–ì–æ—Ä–æ–¥: {data["city"]}\n' \
                        f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["phone_number"]}'

        with open(path.abspath(path.join('database', 'surveys.log')),
                  'a', encoding='utf-8') as file:
            time_now = datetime.now().strftime('%d-%b-%Y %H:%M:%S')
            file.write(f'–î–∞—Ç–∞: {time_now}\n'
                       f'UserID: {message.from_user.id}\n'
                       f'UserFullName: {message.from_user.full_name}\n'
                       f'{full_info}\n\n')

        bot.send_message(message.from_user.id, full_info)
        bot.delete_state(message.from_user.id, message.chat.id)
    elif message.text == '–ù–µ—Ç':
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['phone_number'] = message.text

            full_info = '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n' \
                        f'–ò–º—è: {data["name"]}\n' \
                        f'–í–æ–∑—Ä–∞—Å—Ç: {data["age"]}\n' \
                        f'–°—Ç—Ä–∞–Ω–∞: {data["country"]}\n' \
                        f'–ì–æ—Ä–æ–¥: {data["city"]}\n' \
                        f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data["phone_number"]}'

        with open(path.abspath(path.join('database', 'surveys.log')),
                  'a', encoding='utf-8') as file:
            time_now = datetime.now().strftime('%d-%b-%Y %H:%M:%S')
            file.write(f'–î–∞—Ç–∞: {time_now}\n'
                       f'UserID: {message.from_user.id}\n'
                       f'UserFullName: {message.from_user.full_name}\n'
                       f'{full_info}\n\n')

        bot.send_message(message.from_user.id, full_info)
        bot.delete_state(message.from_user.id, message.chat.id)
    else:
        bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é,\n'
                                               '–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"\n'
                                               '–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ù–µ—Ç"')

